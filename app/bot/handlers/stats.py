from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.add_expense_states import AddExpense
from db.database import BotDB, db_path
from bot.keyboards import stats_menu
from datetime import datetime
from dateutil.relativedelta import relativedelta
import matplotlib.pyplot as plt
import pandas as pd
from io import BytesIO

router = Router()
db = BotDB(db_path)

mouth_dict = {
    1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å', 
    7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
}

def num_to_mouth(num):
    if num == 0:
        num = 12
    return mouth_dict[num]

@router.message(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
async def cmd_start(message: Message):
    currency = db.get_currency(message.from_user.username)[0]
    last_month = (datetime.now() - relativedelta(months=1)).strftime('%m.%Y')
    stats_this_month = db.get_all_user_stat(message.from_user.username, last_month, last_month)

    if not stats_this_month:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    incomes, expenses, categories_data = stats_this_month

    def format_number(n: int) -> str:
        return "{:,}".format(n).replace(",", " ")

    categories_text = '\n'.join(
        f"*{key}*: `{format_number(value)}{currency}`" for key, value in categories_data.items()
    )

    await message.answer(
        f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {num_to_mouth(int(datetime.now().strftime('%m'))-1)}*\n'
        f'*–î–æ—Ö–æ–¥—ã*: `{format_number(incomes)}{currency}`\n'
        f'*–†–∞—Å—Ö–æ–¥—ã*: `{format_number(expenses)}{currency}`\n\n'
        f'*–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n{categories_text}',
        parse_mode="Markdown")


@router.message(lambda msg: msg.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü")
async def cmd_start(message: Message):
    currency = db.get_currency(message.from_user.username)[0]
    this_month = datetime.now().strftime('%m.%Y')
    stats_this_month = db.get_all_user_stat(message.from_user.username, this_month, this_month)

    if not stats_this_month:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    incomes, expenses, categories_data = stats_this_month

    def format_number(n: int) -> str:
        return "{:,}".format(n).replace(",", " ")

    categories_text = '\n'.join(
        f"*{key}*: `{format_number(value)}{currency}`" for key, value in categories_data.items()
    )

    await message.answer(
        f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {num_to_mouth(int(datetime.now().strftime('%m')))}:*\n'
        f'*–î–æ—Ö–æ–¥—ã*: `{format_number(incomes)}{currency}`\n'
        f'*–†–∞—Å—Ö–æ–¥—ã*: `{format_number(expenses)}{currency}`\n\n'
        f'*–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n{categories_text}',
        parse_mode="Markdown")


@router.message(lambda msg: msg.text == "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
async def cmd_start(message: Message):
    currency = db.get_currency(message.from_user.username)[0]
    all_period = db.get_all_period(message.from_user.username)
    stats_this_month = db.get_all_user_stat(message.from_user.username, all_period[0], all_period[1])

    if not stats_this_month:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    incomes, expenses, categories_data = stats_this_month

    def format_number(n: int) -> str:
        return "{:,}".format(n).replace(",", " ")

    categories_text = '\n'.join(
        f"*{key}*: `{format_number(value)}{currency}`" for key, value in categories_data.items()
    )

    await message.answer(
        f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:*\n'
        f'*–î–æ—Ö–æ–¥—ã*: `{format_number(incomes)}{currency}`\n'
        f'*–†–∞—Å—Ö–æ–¥—ã*: `{format_number(expenses)}{currency}`\n\n'
        f'*–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n{categories_text}',
        parse_mode="Markdown")


@router.message(lambda msg: msg.text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")
async def cmd_start(message: Message):
    pass